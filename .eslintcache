[{"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\index.js":"1","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\App.js":"2","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\portfolio.js":"3","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\widgets.js":"4","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\calculator.js":"5","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\battleship.js":"6","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\tictactoe.js":"7"},{"size":197,"mtime":1610209592479,"results":"8","hashOfConfig":"9"},{"size":498,"mtime":1610296188369,"results":"10","hashOfConfig":"9"},{"size":5339,"mtime":1611514196067,"results":"11","hashOfConfig":"9"},{"size":1520,"mtime":1610261394036,"results":"12","hashOfConfig":"9"},{"size":7597,"mtime":1610296557015,"results":"13","hashOfConfig":"9"},{"size":14790,"mtime":1610261801334,"results":"14","hashOfConfig":"9"},{"size":4282,"mtime":1610260388680,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"h8ahj6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\index.js",[],["32","33"],"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\App.js",[],"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\portfolio.js",[],"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\widgets.js",[],"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\calculator.js",[],"C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\battleship.js",["34","35","36","37"],"import React from 'react';\r\nimport '../styles/battleship.scss';\r\n\r\nfunction Ship(coordinateArray) {\r\n    const length = coordinateArray.length;\r\n    const hitLocations = [];\r\n\r\n    const hit = (x, y) => {\r\n        let alreadyHit = false;\r\n        hitLocations.forEach(location => {\r\n            if (location[0] === x && location[1] === y) {\r\n                alreadyHit = true;\r\n            }\r\n        })\r\n        if (!alreadyHit) {\r\n            hitLocations.push([x, y]);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const isSunk = () => {\r\n        return hitLocations.length === length ? true : false\r\n    }\r\n\r\n    return {hit, isSunk}\r\n}\r\n\r\nfunction GameBoard(ships) {\r\n\r\n    const createShips = () => {\r\n        const carrier = Ship(ships['carrier']);\r\n        const battleship = Ship(ships['battleship']);\r\n        const destroyer = Ship(ships['destroyer']);\r\n        const submarine = Ship(ships['submarine']);\r\n        const patrol = Ship(ships['patrol']);\r\n        return {carrier, battleship, destroyer, submarine, patrol}\r\n    }\r\n\r\n    const {carrier, battleship, destroyer, submarine, patrol} = createShips();\r\n    \r\n    const receiveAttack = target => {\r\n        const [x, y] = target;\r\n        let targetShip = null;\r\n        let successfulHit;\r\n        for (const [key, value] of Object.entries(ships)) {\r\n            value.forEach(coordinateArray => {\r\n                if (coordinateArray.toString() === target.toString()) {\r\n                    switch (key) {\r\n                        case 'carrier':\r\n                            targetShip = carrier;\r\n                            break;\r\n                        case 'battleship':\r\n                            targetShip = battleship;\r\n                            break;\r\n                        case 'destroyer':\r\n                            targetShip = destroyer;\r\n                            break;\r\n                        case 'submarine':\r\n                            targetShip = submarine;\r\n                            break;\r\n                        case 'patrol':\r\n                            targetShip = patrol;\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        if (targetShip !== null) {\r\n            successfulHit = targetShip.hit(x, y);\r\n        }\r\n        return successfulHit\r\n    }\r\n\r\n    const allSunk = () => {\r\n        if (carrier.isSunk() && battleship.isSunk() && destroyer.isSunk() && submarine.isSunk() && patrol.isSunk()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return {receiveAttack, allSunk}\r\n}\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color : this.props.playerCoordinate(this.props.x, this.props.y) && this.props.thisPlayer === 1 ? 'blue' : 'white',\r\n            value : '',\r\n        }\r\n    }\r\n\r\n    sendHit = () => {\r\n        if (this.props.thisPlayer === this.props.currentPlayer() && this.state.value !== 'x') {\r\n            this.setState({\r\n                value : 'x'\r\n            })\r\n            const successfulHit = this.props.click([this.props.x, this.props.y]);\r\n            if (successfulHit === true) {\r\n                this.setState({\r\n                    color: 'red',\r\n                })\r\n                this.props.checkForWin();\r\n            } else {\r\n                this.props.switchPlayer();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='bs-square' \r\n            onClick={() => this.sendHit()} style={{backgroundColor: this.state.color}}>\r\n            {this.state.value}</div>\r\n        )   \r\n    }\r\n}\r\n\r\nclass Battleship extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n        this.cpuTurnLoop = this.cpuTurnLoop.bind(this);\r\n    }\r\n\r\n    newGame = () => {\r\n        const playerBoard = this.getRandomCoordinates();\r\n        const newBoard1 = GameBoard(playerBoard);\r\n        const newBoard2 = GameBoard(this.getRandomCoordinates());\r\n        this.setState({\r\n            board1 : newBoard1,\r\n            board2 : newBoard2,\r\n            player : 2,\r\n            cpuTargetHistory : [-1],\r\n            nextTarget : -1,\r\n            playerBoard : playerBoard,\r\n        })\r\n        this.drawBoard(newBoard1, 1);\r\n        this.drawBoard(newBoard2, 2);        \r\n    }\r\n\r\n    getRandomCoordinates = () => {\r\n        const ships = {};\r\n        const allCoordinates = [];\r\n        let boatCoordinates = Math.random() >= 0.5 ? this.fillHorizontal(5) : this.fillVertical(5);\r\n        boatCoordinates.forEach(coordinate => {\r\n            allCoordinates.push(coordinate);\r\n        })\r\n        ships['carrier'] = boatCoordinates;\r\n        let duplicates = true;\r\n        while (duplicates !== false) {\r\n            boatCoordinates = Math.random() >= 0.5 ? this.fillHorizontal(4) : this.fillVertical(4);\r\n            duplicates = this.duplicatesExist(boatCoordinates, allCoordinates);\r\n        }\r\n        boatCoordinates.forEach(coordinate => {\r\n            allCoordinates.push(coordinate);\r\n        })\r\n        ships['battleship'] = boatCoordinates;\r\n        duplicates = true;\r\n        while (duplicates !== false) {\r\n            boatCoordinates = Math.random() >= 0.5 ? this.fillHorizontal(3) : this.fillVertical(3);\r\n            duplicates = this.duplicatesExist(boatCoordinates, allCoordinates);\r\n        }\r\n        boatCoordinates.forEach(coordinate => {\r\n            allCoordinates.push(coordinate);\r\n        })\r\n        ships['destroyer'] = boatCoordinates;\r\n        duplicates = true;\r\n        while (duplicates !== false) {\r\n            boatCoordinates = Math.random() >= 0.5 ? this.fillHorizontal(3) : this.fillVertical(3);\r\n            duplicates = this.duplicatesExist(boatCoordinates, allCoordinates);\r\n        }\r\n        boatCoordinates.forEach(coordinate => {\r\n            allCoordinates.push(coordinate);\r\n        })\r\n        ships['submarine'] = boatCoordinates;\r\n        duplicates = true;\r\n        while (duplicates !== false) {\r\n            boatCoordinates = Math.random() >= 0.5 ? this.fillHorizontal(2) : this.fillVertical(2);\r\n            duplicates = this.duplicatesExist(boatCoordinates, allCoordinates);\r\n        }\r\n        ships['patrol'] = boatCoordinates;\r\n        \r\n        return ships;\r\n    }\r\n\r\n    duplicatesExist = (current, previous) => {\r\n        let duplicates = false;\r\n        current.forEach(newCoordinate => {\r\n            previous.forEach(oldCoordinate => {\r\n                if (JSON.stringify(newCoordinate) === JSON.stringify(oldCoordinate)) {\r\n                    duplicates = true;\r\n                }\r\n            })\r\n        })\r\n        return duplicates;\r\n    }\r\n\r\n    fillHorizontal = (qty) => {\r\n        const startingCoordinate = [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)];\r\n        const shipCoordinates = [startingCoordinate];\r\n        if (startingCoordinate[0] + qty > 9) {\r\n            for (let x = 1; x < qty; x++) {\r\n                shipCoordinates.push([startingCoordinate[0] - x, startingCoordinate[1]])\r\n            } \r\n        } else {\r\n            for (let x = 1; x < qty; x++) {\r\n                shipCoordinates.push([startingCoordinate[0] + x, startingCoordinate[1]])\r\n            }\r\n        }\r\n        return shipCoordinates;\r\n    }\r\n\r\n    fillVertical = (qty) => {\r\n        const startingCoordinate = [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)];\r\n        const shipCoordinates = [startingCoordinate];\r\n        if (startingCoordinate[1] + qty > 9) {\r\n            for (let y = 1; y < qty; y++) {\r\n                shipCoordinates.push([startingCoordinate[0], startingCoordinate[1] - y]);\r\n            }\r\n        } else {\r\n            for (let y = 1; y < qty; y++) {\r\n                shipCoordinates.push([startingCoordinate[0], startingCoordinate[1] + y]);\r\n            }\r\n        }\r\n        return shipCoordinates;\r\n    }\r\n\r\n    drawBoard = (board, player) => {\r\n        let squares = [];\r\n        for (let row = 0; row < 10; row++) {\r\n            for (let column = 0; column < 10; column++) {\r\n                squares.push(<Square key={Math.random()} click={board.receiveAttack}\r\n                x={row} y={column} currentPlayer={this.getCurrentPlayer} \r\n                thisPlayer={player} switchPlayer={this.switchPlayer}\r\n                checkForWin={this.checkForWin} ref={React.createRef()}\r\n                playerCoordinate={this.checkPlayerCoordinate} />)\r\n            }\r\n        }\r\n        if (player === 1) {\r\n            this.setState({\r\n                p1BoardRender : squares,\r\n            })\r\n        }   else if (player === 2) {\r\n            this.setState({\r\n                p2BoardRender : squares,\r\n            })\r\n        }\r\n    }\r\n\r\n    checkPlayerCoordinate = (x, y) => {\r\n        let playerCoordinate = false;\r\n        const playerBoard = this.state.playerBoard;\r\n        for (const [key, values] of Object.entries(playerBoard)) {\r\n            values.forEach(value => {\r\n                if (value[0] === x && value[1] === y) {\r\n                    playerCoordinate = true;\r\n                }\r\n            }) \r\n        }\r\n        return playerCoordinate;\r\n    }\r\n\r\n    getCurrentPlayer = () => {\r\n        return this.state.player;\r\n    }\r\n\r\n    switchPlayer = () => {\r\n        const player = this.state.player;\r\n        player === 1 ? this.setState({player: 2}) : this.setState({player: 1});\r\n        this.cpuTurnLoop();\r\n    }\r\n\r\n    checkForWin = () => {\r\n        let winner = false;\r\n        if (this.state.board1.allSunk() === true) {\r\n            window.alert('Player 2 Wins!');\r\n            winner = true;\r\n            this.setState({\r\n                player : -1,\r\n            })\r\n        }\r\n        if (this.state.board2.allSunk() === true) {\r\n            window.alert('Player 1 Wins!');\r\n            winner = true;\r\n            this.setState({\r\n                player : -1,\r\n            })\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    sleep = (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n      }\r\n\r\n    async cpuTurnLoop() {\r\n        let cpuTurn = true;\r\n        while (cpuTurn === true) {\r\n            while (this.state.cpuTargetHistory.indexOf(this.state.nextTarget) !== -1) {\r\n                await this.sleep(500);\r\n                this.calculateNextTarget();\r\n            }\r\n            const index = this.state.nextTarget;\r\n            const component = this.state.p1BoardRender[index].ref.current;\r\n            let successfulHit = this.state.board1.receiveAttack([component.props.x, component.props.y]);\r\n            if (successfulHit === true) {\r\n                component.setState({\r\n                    color : 'red',\r\n                    value : 'x'\r\n                })\r\n            } else {\r\n                successfulHit = false;\r\n                component.setState({\r\n                    value : 'x'\r\n                })\r\n                cpuTurn = false;\r\n            }\r\n            this.state.cpuTargetHistory.unshift(index);\r\n            this.state.cpuTargetHistory.push(successfulHit);\r\n        }\r\n        if (this.checkForWin() !== true) {\r\n            this.setState({\r\n                player : 2\r\n            })\r\n        }\r\n    }\r\n\r\n    calculateNextTarget = () => {\r\n        if (this.state.cpuTargetHistory[this.state.cpuTargetHistory.length - 1] === true) {\r\n            this.checkRight(this.state.cpuTargetHistory[0]); \r\n        } else if (this.state.cpuTargetHistory[this.state.cpuTargetHistory.length - 2] === true) {\r\n            this.checkLeft(this.state.cpuTargetHistory[1]);\r\n        } else if (this.state.cpuTargetHistory[this.state.cpuTargetHistory.length - 3] === true) {\r\n            this.checkUp(this.state.cpuTargetHistory[2]);\r\n        } else if (this.state.cpuTargetHistory[this.state.cpuTargetHistory.length - 4] === true) {\r\n            this.checkDown(this.state.cpuTargetHistory[3]);\r\n        } else {\r\n            this.setState({\r\n                nextTarget : Math.floor(Math.random() * 100),\r\n            }) \r\n        }\r\n    }\r\n\r\n    checkRight = (index) => {\r\n        if (index + 1 < 100 && index + 1 >= 0) {\r\n            if (this.state.p1BoardRender[index + 1].ref.current.state.value !== 'x') {\r\n                this.setState({\r\n                    nextTarget : index + 1,\r\n                }) \r\n            } else {\r\n                this.checkLeft(index)\r\n            }\r\n        } else {\r\n            this.checkLeft(index)\r\n        }\r\n    }\r\n\r\n    checkLeft = (index) => {\r\n        if (index - 1 < 100 && index - 1 >= 0) {\r\n            if (this.state.p1BoardRender[index - 1].ref.current.state.value !== 'x') {\r\n                this.setState({\r\n                    nextTarget : index - 1,\r\n                }) \r\n            } else {\r\n                this.checkUp(index) \r\n            }\r\n        } else {\r\n            this.checkUp(index) \r\n        }\r\n    }\r\n\r\n    checkUp = (index) => {\r\n        if (index - 10 < 100 && index - 10 >= 0) {\r\n            if (this.state.p1BoardRender[index - 10].ref.current.state.value !== 'x') {\r\n                this.setState({\r\n                    nextTarget : index - 10,\r\n                }) \r\n            } else {\r\n                this.checkDown(index)\r\n            } \r\n        } else {\r\n            this.checkDown(index)\r\n        }\r\n    }\r\n\r\n    checkDown = (index) => {\r\n        if (index + 10 < 100 && index + 10 >= 0) {\r\n            if (this.state.p1BoardRender[index + 10].ref.current.state.value !== 'x') {\r\n                this.setState({\r\n                    nextTarget : index + 10,\r\n                }) \r\n            } else {\r\n                this.setState({\r\n                    nextTarget : Math.floor(Math.random() * 100),\r\n                }) \r\n            }\r\n        } else {\r\n            this.setState({\r\n                nextTarget : Math.floor(Math.random() * 100),\r\n            }) \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='bs-container'>\r\n                <div className='bs-newGame' onClick={this.newGame}>New Game</div>\r\n                <div className='bs-boards'>\r\n                    <div>\r\n                        <div className='title mt-5 bs-title'>Your Ships</div>\r\n                        <div className='bs-board'>\r\n                            {this.state.p1BoardRender}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='title mt-5 bs-title'>CPU Ships</div>\r\n                        <div className='bs-board'>\r\n                            {this.state.p2BoardRender}\r\n                        </div>\r\n                    </div>\r\n                </div>         \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Battleship;","C:\\Users\\Michael\\Programming\\portfolio-v3\\src\\containers\\tictactoe.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":47,"column":27,"nodeType":"44","messageId":"45","endLine":67,"endColumn":14},{"ruleId":"46","severity":1,"message":"47","line":49,"column":21,"nodeType":"48","messageId":"49","endLine":65,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":258,"column":21,"nodeType":"52","messageId":"53","endLine":258,"endColumn":24},{"ruleId":"42","severity":1,"message":"54","line":259,"column":28,"nodeType":"44","messageId":"45","endLine":263,"endColumn":14},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'targetShip', 'targetShip', 'targetShip', 'targetShip', 'targetShip'.","ArrowFunctionExpression","unsafeRefs","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","Function declared in a loop contains unsafe references to variable(s) 'playerCoordinate'.","no-global-assign","no-unsafe-negation"]